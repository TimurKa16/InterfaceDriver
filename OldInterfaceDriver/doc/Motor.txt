#include "DSP2833x_Device.h"

// external function prototypes
extern void InitSysCtrl(void);
extern void InitPieCtrl(void);
extern void InitPieVectTable(void);
extern void InitCpuTimers(void);
extern void ConfigCpuTimer(struct CPUTIMER_VARS *, float, float);

// Prototype statements for functions found within this file.
void Gpio_select(void);
interrupt void cpu_timer0_isr(void);

//###########################################################################
//                      main code
//###########################################################################
//
//  GPOI9 - In1
//  GpIO11 - IN2
//  GPIO49 - EF
//
//
//
void Move_clockwise();
void Move_counterclockwise();
void Stop();
void Error_flag();



#define BUTTON_ON !GpioDataRegs.GPBDAT.bit.GPIO48
#define BUTTON_OFF GpioDataRegs.GPBDAT.bit.GPIO48
#define DELAY 10000



unsigned char flag = 1;
unsigned char function = 3;
unsigned char EF;



void main(void)
 {

    InitSysCtrl();  // Basic Core Init from DSP2833x_SysCtrl.c

    DINT;               // Disable all interrupts

    Gpio_select();      // GPIO9, GPIO11, GPIO34 and GPIO49 as output
                        // to 4 LEDs at Peripheral Explorer)

    InitPieCtrl();      // basic setup of PIE table; from DSP2833x_PieCtrl.c

    InitPieVectTable(); // default ISR's in PIE

    EALLOW;
    PieVectTable.TINT0 = &cpu_timer0_isr;
    EDIS;

    InitCpuTimers();    // basic setup CPU Timer0, 1 and 2

    ConfigCpuTimer(&CpuTimer0, 150, DELAY); // CPU - Timer0 at 100 milliseconds

    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;

    IER |=1;

    EINT;
    ERTM;

    CpuTimer0Regs.TCR.bit.TSS = 0;  // start timer0

    while(1)
    {
        while(CpuTimer0.InterruptCount == 0);
        CpuTimer0.InterruptCount = 0;


        switch(function)
        {
            case 1:
            {
                Move_clockwise();
                break;
            }

            case 2:
            {
                    Move_counterclockwise();
                break;
            }

            case 3:
            {
                    Stop();
                break;
            }

            case 4:
            {
                    Error_flag();
                break;
            }
    }


//        if(BUTTON_ON)
//            Move_counterclockwise();
//
//        if(BUTTON_OFF)
//            Move_clockwise();

    }
 }

void Move_clockwise()           // Delivers  00   0 at GPIO9 and 0 at GPIO11
{
    while(function == 1)
    {
        while(CpuTimer0.InterruptCount == 0);
        CpuTimer0.InterruptCount = 0;

        GpioDataRegs.GPACLEAR.bit.GPIO9 = 1;
        GpioDataRegs.GPACLEAR.bit.GPIO11 = 1;
    }
}

void Move_counterclockwise()    // Delivers  01   0 at GPIO9 and 1 at GPIO11
{
    while(function == 2)
    {
        while(CpuTimer0.InterruptCount == 0);
        CpuTimer0.InterruptCount = 0;

        GpioDataRegs.GPACLEAR.bit.GPIO9 = 1;
        GpioDataRegs.GPASET.bit.GPIO11 = 1;
    }
}

void Stop()                     // Delivers   10  1 at GPIO9 and 0 at GPIO11
{
    while(function == 3)
    {
        while(CpuTimer0.InterruptCount == 0);
        CpuTimer0.InterruptCount = 0;

        GpioDataRegs.GPASET.bit.GPIO9 = 1;
        GpioDataRegs.GPACLEAR.bit.GPIO11 = 1;
    }
}

void Error_flag()                       // Delivers  11   1 at GPIO9 and 1 at GPIO11
{
    while(function == 4)
    {
        while(CpuTimer0.InterruptCount == 0);
        CpuTimer0.InterruptCount = 0;

        GpioDataRegs.GPASET.bit.GPIO9 = 1;
        GpioDataRegs.GPASET.bit.GPIO11 = 1;
        EF = GpioDataRegs.GPBDAT.bit.GPIO49;

    }
}



void Gpio_select(void)
{
    EALLOW;
    GpioCtrlRegs.GPAMUX1.all = 0;       // GPIO15 ... GPIO0 = General Purpose I/O
    GpioCtrlRegs.GPAMUX2.all = 0;       // GPIO31 ... GPIO16 = General Purpose I/O
    GpioCtrlRegs.GPBMUX1.all = 0;       // GPIO47 ... GPIO32 = General Purpose I/O
    GpioCtrlRegs.GPBMUX2.all = 0;       // GPIO63 ... GPIO48 = General Purpose I/O
    GpioCtrlRegs.GPCMUX1.all = 0;       // GPIO79 ... GPIO64 = General Purpose I/O
    GpioCtrlRegs.GPCMUX2.all = 0;       // GPIO87 ... GPIO80 = General Purpose I/O

    GpioCtrlRegs.GPADIR.all = 0;
    GpioCtrlRegs.GPADIR.bit.GPIO9 = 1;  // peripheral explorer: LED LD1 at GPIO9
    GpioCtrlRegs.GPADIR.bit.GPIO11 = 1; // peripheral explorer: LED LD2 at GPIO11

    GpioCtrlRegs.GPBDIR.all = 0;        // GPIO63-32 as inputs
    GpioCtrlRegs.GPBDIR.bit.GPIO34 = 1; // peripheral explorer: LED LD3 at GPIO34
    GpioCtrlRegs.GPBDIR.bit.GPIO49 = 1; // peripheral explorer: LED LD4 at GPIO49
    GpioCtrlRegs.GPCDIR.all = 0;        // GPIO87-64 as inputs
    EDIS;
}

interrupt void cpu_timer0_isr(void)
{
    CpuTimer0.InterruptCount++;
    EALLOW;
    SysCtrlRegs.WDKEY = 0xAA;   // service WD #2
    EDIS;
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}
//===========================================================================
// End of SourceCode.
//===========================================================================
